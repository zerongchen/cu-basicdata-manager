(function(a, c) {
	var b = function(e, d) {
		this.$element = a(e);
		this.options = a.extend({}, a.fn.tree.defaults, d);
		this.$element.on("click", ".tree-item", a.proxy(function(f) {
			this.selectItem(f.currentTarget)
		}, this));
		this.$element.on("click", ".tree-folder-header", a.proxy(function(f) {
			this.selectFolder(f.currentTarget)
		}, this));

		this.$element.on("click", ".titlebox", function(event) {
			//全选checkbox的点击
            //判断.tree-folder-content的div中的内容，如果为空，checkbox全选不能点击
			if($(this).parent().parent().next().html() == '') {
				$(this).attr('disabled'); //添加禁止点击事件
			} 
			//判断<i>标签的class一开始是不是处于未点击状态
			else if($(this).parent().parent().parent().find(".inputbox").hasClass("fa-square-o")) {
				$(this).addClass("fa-check-square-o").removeClass("fa-square-o");
				$(this).parent().parent().parent().find(".tree-item").addClass("tree-selected");
				$(this).parent().parent().parent().find(".inputbox").addClass("fa-check-square-o").removeClass("fa-square-o");
			} else {
				$(this).addClass("fa-square-o").removeClass("fa-check-square-o");
				$(this).parent().parent().parent().find(".tree-item").removeClass("tree-selected");
				$(this).parent().parent().parent().find(".inputbox").addClass("fa-square-o").removeClass("fa-check-square-o");
			}
			event.stopPropagation(); //阻止事件冒泡
		});

		this.$element.on("click", ".fa-file-text-o", function(event) {
			alert("跳转到用户权限管理页面");
			window.location.href = "user.html";
			event.stopPropagation();
		});
		this.$element.on("click", ".fa-edit", function(event) {
			//alert("修改title的数据”");
			var inputTest = $(this).parent().prev('.titleTest');
			inputTest.html("");
			$(this).parent().prev('.titleTest').append("<input type='text' class='inputTest'/>");
			event.stopPropagation();
			$(".inputTest").click(function(event) {
				event.stopPropagation();
			})
			//input框一开始默认获取焦点
			inputTest.find('.inputTest').focus();
			//input框失去焦点事件
			inputTest.find('.inputTest').blur(function(event) {
				inputTest.html(this.value);
				inputTest.find('.inputTest').remove();
				//console.log(this.value);
				event.stopPropagation();
			});
			//input框的回车键事件
			inputTest.find('.inputTest').keypress(function(e) {
				var key = e.which; //e.which是按键的值 
				if(key == 13) {
					//alert("this.value"); 
					inputTest.html(this.value);
					inputTest.find('.inputTest').remove();
				}
			});
		});
		this.$element.on("click", ".fa-trash-o", function(event) {
			//			alert("删除数据");
			var $this = $(this);
			swal({
				title: "确定要删除这条信息吗",
				text: "删除后将无法恢复，请谨慎操作！",
				type: "warning",
				showCancelButton: true,
				confirmButtonColor: "#DD6B55",
				confirmButtonText: "是的，我要删除！",
				cancelButtonText: "让我再考虑一下…",
				closeOnConfirm: false,
				closeOnCancel: false
			}, function(isConfirm) {
				if(isConfirm) {
					$this.parent().parent().parent().parent('.tree-folder').remove();
					$this.parent().parent().parent('.tree-item').remove();
					swal("删除成功！", "已经永久删除了这条记录。", "success")
				} else {
					swal("已取消", "取消了删除操作！", "error")
				}
			})
			event.stopPropagation();
		});
		this.render()
	};
	b.prototype = {
		constructor: b,
		render: function() {
			this.populate(this.$element)
		},
		populate: function(f) {
			var e = this;
			var d = f.parent().find(".tree-loader:eq(0)");
			d.show();
			this.options.dataSource.data(f.data(), function(g) {
				d.hide();
				a.each(g.data, function(h, j) {
					var i;
					if(j.type === "folder") {
						i = e.$element.find(".tree-folder:eq(0)").clone().show();
						i.find(".tree-folder-name").html(j.name);
						i.find(".tree-loader").html(e.options.loadingHTML);
						var k = i.find(".tree-folder-header");
						k.data(j);
						if("icon-class" in j) {
							k.find('[class*="icon-"]').addClass(j["icon-class"])
						}
					} else {
						if(j.type === "item") {
							i = e.$element.find(".tree-item:eq(0)").clone().show();
							i.find(".tree-item-name").html(j.name);
							i.data(j)
						}
					}
					if(f.hasClass("tree-folder-header")) {
						f.parent().find(".tree-folder-content:eq(0)").append(i)
					} else {
						f.append(i)
					}
				});
				e.$element.trigger("loaded")
			})
		},
		selectItem: function(e) {
			if(this.options.selectable == false) {
				return
			}
			var d = a(e);
			var g = this.$element.find(".tree-selected");
			var f = [];
			if(this.options.multiSelect) {
				a.each(g, function(i, j) {
					var h = a(j);
					if(h[0] !== d[0]) {
						f.push(a(j).data())
					}
				})
			} else {
				if(g[0] !== d[0]) {
					g.removeClass("tree-selected").find(".inputbox").removeClass(this.options["selected-icon"]).addClass(this.options["unselected-icon"]);
					f.push(d.data())
				}
			}
			if(d.hasClass("tree-selected")) {
				d.removeClass("tree-selected");
				d.find(".inputbox").removeClass(this.options["selected-icon"]).addClass(this.options["unselected-icon"])
			} else {
				d.addClass("tree-selected");
				d.find(".inputbox").removeClass(this.options["unselected-icon"]).addClass(this.options["selected-icon"]);
				if(this.options.multiSelect) {
					f.push(d.data())
				}
			}
			if(f.length) {
				this.$element.trigger("selected", {
					info: f
				})
			}
		},
		selectFolder: function(e) {
			var d = a(e);
			var f = d.parent();
			if(d.find("." + this.options["close-icon"]).length) {
				if(f.find(".tree-folder-content").children().length) {
					f.find(".tree-folder-content:eq(0)").show()
				} else {
					this.populate(d)
				}
				f.find("." + this.options["close-icon"] + ":eq(0)").removeClass(this.options["close-icon"]).addClass(this.options["open-icon"]);
				this.$element.trigger("opened", d.data())
			} else {
				if(this.options.cacheItems) {
					f.find(".tree-folder-content:eq(0)").hide()
				} else {
					f.find(".tree-folder-content:eq(0)").empty()
				}
				f.find("." + this.options["open-icon"] + ":eq(0)").removeClass(this.options["open-icon"]).addClass(this.options["close-icon"]);
				this.$element.trigger("closed", d.data())
			}
		},
		selectedItems: function() {
			var e = this.$element.find(".tree-selected");
			var d = [];
			a.each(e, function(f, g) {
				d.push(a(g).data())
			});
			return d
		}
	};
	a.fn.tree = function(e, g) {
		var f;
		var d = this.each(function() {
			var j = a(this);
			var i = j.data("tree");
			var h = typeof e === "object" && e;
			if(!i) {
				j.data("tree", (i = new b(this, h)))
			}
			if(typeof e === "string") {
				f = i[e](g)
			}
		});
		return(f === c) ? d : f
	};
	a.fn.tree.defaults = {
		multiSelect: false,
		loadingHTML: "<div>Loading...</div>",
		cacheItems: true
	};
	a.fn.tree.Constructor = b
})(window.jQuery);